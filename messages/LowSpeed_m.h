//
// Generated file, do not edit! Created by nedtool 5.2 from veins/modules/messages/LowSpeed.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __LOWSPEED_M_H
#define __LOWSPEED_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0502
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "veins/modules/messages/WaveShortMessage_m.h"
#include "veins/base/utils/Coord.h"
// }}

/**
 * Class generated from <tt>veins/modules/messages/LowSpeed.msg:26</tt> by nedtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * packet LowSpeed extends WaveShortMessage
 * {
 *     string info = "";
 *     Coord senderPos;
 *     Coord senderSpeed;
 *     string road = "";
 *     string lane = "";
 *     bool request;
 *     int chordNodeSHA;
 *     int numRingNode = 0;
 * }
 * </pre>
 */
class LowSpeed : public ::WaveShortMessage
{
  protected:
    ::omnetpp::opp_string info;
    Coord senderPos;
    Coord senderSpeed;
    ::omnetpp::opp_string road;
    ::omnetpp::opp_string lane;
    bool request;
    int chordNodeSHA;
    int numRingNode;

  private:
    void copy(const LowSpeed& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const LowSpeed&);

  public:
    LowSpeed(const char *name=nullptr, short kind=0);
    LowSpeed(const LowSpeed& other);
    virtual ~LowSpeed();
    LowSpeed& operator=(const LowSpeed& other);
    virtual LowSpeed *dup() const override {return new LowSpeed(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const char * getInfo() const;
    virtual void setInfo(const char * info);
    virtual Coord& getSenderPos();
    virtual const Coord& getSenderPos() const {return const_cast<LowSpeed*>(this)->getSenderPos();}
    virtual void setSenderPos(const Coord& senderPos);
    virtual Coord& getSenderSpeed();
    virtual const Coord& getSenderSpeed() const {return const_cast<LowSpeed*>(this)->getSenderSpeed();}
    virtual void setSenderSpeed(const Coord& senderSpeed);
    virtual const char * getRoad() const;
    virtual void setRoad(const char * road);
    virtual const char * getLane() const;
    virtual void setLane(const char * lane);
    virtual bool getRequest() const;
    virtual void setRequest(bool request);
    virtual int getChordNodeSHA() const;
    virtual void setChordNodeSHA(int chordNodeSHA);
    virtual int getNumRingNode() const;
    virtual void setNumRingNode(int numRingNode);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const LowSpeed& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, LowSpeed& obj) {obj.parsimUnpack(b);}


#endif // ifndef __LOWSPEED_M_H

