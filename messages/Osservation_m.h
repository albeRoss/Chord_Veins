//
// Generated file, do not edit! Created by nedtool 5.2 from veins/modules/messages/Osservation.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __OSSERVATION_M_H
#define __OSSERVATION_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0502
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "veins/modules/messages/WaveShortMessage_m.h"
// }}

/**
 * Class generated from <tt>veins/modules/messages/Osservation.msg:26</tt> by nedtool.
 * <pre>
 * packet Osservation extends WaveShortMessage
 * {
 *     int firstSender;
 *     int senderOs;
 *     int receiverOs;
 *     int kind;
 *     int id;
 *     string info;
 *     bool isValidate = false;
 *     bool blockValidated = false;
 *     double sequenceNumber;
 *     string chordName = "";
 *     bool isFirstSend = false;
 *     bool isLastHop = false;
 * }
 * </pre>
 */
class Osservation : public ::WaveShortMessage
{
  protected:
    int firstSender;
    int senderOs;
    int receiverOs;
    int kind;
    int id;
    ::omnetpp::opp_string info;
    bool isValidate;
    bool blockValidated;
    double sequenceNumber;
    ::omnetpp::opp_string chordName;
    bool isFirstSend;
    bool isLastHop;

  private:
    void copy(const Osservation& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Osservation&);

  public:
    Osservation(const char *name=nullptr, short kind=0);
    Osservation(const Osservation& other);
    virtual ~Osservation();
    Osservation& operator=(const Osservation& other);
    virtual Osservation *dup() const override {return new Osservation(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getFirstSender() const;
    virtual void setFirstSender(int firstSender);
    virtual int getSenderOs() const;
    virtual void setSenderOs(int senderOs);
    virtual int getReceiverOs() const;
    virtual void setReceiverOs(int receiverOs);
    virtual int getKind() const;
    virtual void setKind(int kind);
    virtual int getId() const;
    virtual void setId(int id);
    virtual const char * getInfo() const;
    virtual void setInfo(const char * info);
    virtual bool getIsValidate() const;
    virtual void setIsValidate(bool isValidate);
    virtual bool getBlockValidated() const;
    virtual void setBlockValidated(bool blockValidated);
    virtual double getSequenceNumber() const;
    virtual void setSequenceNumber(double sequenceNumber);
    virtual const char * getChordName() const;
    virtual void setChordName(const char * chordName);
    virtual bool getIsFirstSend() const;
    virtual void setIsFirstSend(bool isFirstSend);
    virtual bool getIsLastHop() const;
    virtual void setIsLastHop(bool isLastHop);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Osservation& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Osservation& obj) {obj.parsimUnpack(b);}


#endif // ifndef __OSSERVATION_M_H

