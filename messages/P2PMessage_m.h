//
// Generated file, do not edit! Created by nedtool 5.2 from veins/modules/messages/P2PMessage.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __P2PMESSAGE_M_H
#define __P2PMESSAGE_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0502
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "veins/modules/messages/WaveShortMessage_m.h"
// }}

/**
 * Class generated from <tt>veins/modules/messages/P2PMessage.msg:24</tt> by nedtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * packet P2PMessage extends WaveShortMessage
 * {
 *     int kind;
 *     string chordName;
 * 
 *     int macReqSource = 0;
 *     int destinationSHA; //id in sha 
 *     int firstSourceSHA;
 * 
 *     int keyFindSuccessor; //id in sha 
 *     int keyNotify;
 * 
 *     int callerFunction = 10000;
 *     int responseObj;
 * 
 *     int newPredecessor;
 *     int newSuccessor;
 * 
 *     bool request;
 * 
 *     int hop = 0;
 * 
 * }
 * </pre>
 */
class P2PMessage : public ::WaveShortMessage
{
  protected:
    int kind;
    ::omnetpp::opp_string chordName;
    int macReqSource;
    int destinationSHA;
    int firstSourceSHA;
    int keyFindSuccessor;
    int keyNotify;
    int callerFunction;
    int responseObj;
    int newPredecessor;
    int newSuccessor;
    bool request;
    int hop;

  private:
    void copy(const P2PMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const P2PMessage&);

  public:
    P2PMessage(const char *name=nullptr, short kind=0);
    P2PMessage(const P2PMessage& other);
    virtual ~P2PMessage();
    P2PMessage& operator=(const P2PMessage& other);
    virtual P2PMessage *dup() const override {return new P2PMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getKind() const;
    virtual void setKind(int kind);
    virtual const char * getChordName() const;
    virtual void setChordName(const char * chordName);
    virtual int getMacReqSource() const;
    virtual void setMacReqSource(int macReqSource);
    virtual int getDestinationSHA() const;
    virtual void setDestinationSHA(int destinationSHA);
    virtual int getFirstSourceSHA() const;
    virtual void setFirstSourceSHA(int firstSourceSHA);
    virtual int getKeyFindSuccessor() const;
    virtual void setKeyFindSuccessor(int keyFindSuccessor);
    virtual int getKeyNotify() const;
    virtual void setKeyNotify(int keyNotify);
    virtual int getCallerFunction() const;
    virtual void setCallerFunction(int callerFunction);
    virtual int getResponseObj() const;
    virtual void setResponseObj(int responseObj);
    virtual int getNewPredecessor() const;
    virtual void setNewPredecessor(int newPredecessor);
    virtual int getNewSuccessor() const;
    virtual void setNewSuccessor(int newSuccessor);
    virtual bool getRequest() const;
    virtual void setRequest(bool request);
    virtual int getHop() const;
    virtual void setHop(int hop);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const P2PMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, P2PMessage& obj) {obj.parsimUnpack(b);}


#endif // ifndef __P2PMESSAGE_M_H

